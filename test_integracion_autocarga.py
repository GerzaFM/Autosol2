#!/usr/bin/env python3
"""
Test integrado completo del sistema de AutoCarga:
1. Extracci√≥n de datos del PDF
2. Procesamiento de datos  
3. Inserci√≥n en base de datos
4. Actualizaci√≥n del frame de informaci√≥n
"""

import sys
import os

# Agregar el directorio src al path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.buscarapp.autocarga.extractor import PDFDataExtractor
from src.buscarapp.utils.procesar_datos_vale import procesar_datos_vale
from src.bd.models import db, Vale
from src.bd.bd_control import BDControl

def test_integracion_completa():
    """
    Test de integraci√≥n completa del sistema AutoCarga.
    """
    print("üß™ TEST INTEGRACI√ìN COMPLETA - AUTOCARGA")
    print("=" * 60)
    
    # 1. EXTRACCI√ìN DE DATOS
    print("1Ô∏è‚É£ EXTRAYENDO DATOS DEL PDF...")
    extractor = PDFDataExtractor()
    vale_path = "C:/QuiterWeb/cache/15gerzahin.flores_QRSVCMX_V152266_180646_CD.pdf"
    
    if not os.path.exists(vale_path):
        print(f"‚ùå Archivo no encontrado: {vale_path}")
        return False
    
    datos_raw = extractor.extract_all_data(vale_path, debug=False)
    print("‚úÖ Datos extra√≠dos exitosamente")
    print(f"   üìä {len(datos_raw)} campos extra√≠dos")
    
    # 2. PROCESAMIENTO DE DATOS
    print("\n2Ô∏è‚É£ PROCESANDO DATOS PARA BD...")
    datos_procesados = procesar_datos_vale(datos_raw)
    print("‚úÖ Datos procesados exitosamente")
    
    # Mostrar datos procesados clave
    print("   üìã Datos procesados clave:")
    campos_clave = ['noVale', 'proveedor', 'total', 'departamento', 'referencia']
    for campo in campos_clave:
        valor = datos_procesados.get(campo, 'N/A')
        print(f"      {campo:12}: {valor}")
    
    # 3. VERIFICACI√ìN DE BASE DE DATOS
    print("\n3Ô∏è‚É£ VERIFICANDO BD...")
    try:
        db.connect()
        
        # Verificar estructura de tabla
        cursor = db.execute_sql("PRAGMA table_info(vale)")
        columnas = [row[1] for row in cursor.fetchall()]
        print(f"‚úÖ Tabla 'vale' verificada: {len(columnas)} columnas")
        
        # 4. SIMULACI√ìN DE INSERCI√ìN
        print("\n4Ô∏è‚É£ SIMULANDO INSERCI√ìN EN BD...")
        
        # Verificar si el vale ya existe
        try:
            vale_existente = Vale.get(Vale.noVale == datos_procesados['noVale'])
            print(f"‚ö†Ô∏è  Vale {datos_procesados['noVale']} ya existe en BD (ID: {vale_existente.id})")
            
            # Mostrar datos existentes para comparar
            print("   üìã Datos actuales en BD:")
            print(f"      ID: {vale_existente.id}")
            print(f"      Proveedor: {vale_existente.proveedor}")
            print(f"      Total: {vale_existente.total}")
            print(f"      Descripci√≥n: {vale_existente.descripcion[:50]}...")
            
            usar_existente = True
            
        except Vale.DoesNotExist:
            print(f"‚úÖ Vale {datos_procesados['noVale']} no existe - ser√≠a insertado")
            usar_existente = False
            
            # Mostrar datos que se insertar√≠an
            print("   üìã Datos a insertar:")
            for key, value in datos_procesados.items():
                if value is not None:
                    valor_mostrar = str(value)[:50] + "..." if len(str(value)) > 50 else str(value)
                    print(f"      {key:15}: {valor_mostrar}")
        
        # 5. TEST DE BD_CONTROL
        print("\n5Ô∏è‚É£ TESTING BD_CONTROL...")
        bd_control = BDControl()
        
        if usar_existente:
            # Usar vale existente para test
            ultimo_vale = vale_existente
        else:
            # Para el test, insertemos temporalmente el vale
            print("   üìù Insertando vale para test...")
            ultimo_vale = Vale.create(**datos_procesados)
            print(f"‚úÖ Vale insertado con ID: {ultimo_vale.id}")
        
        # Test obtener_ultimo_vale
        ultimo_vale_obtenido = bd_control.obtener_ultimo_vale()
        if ultimo_vale_obtenido:
            print(f"‚úÖ obtener_ultimo_vale() funciona - ID: {ultimo_vale_obtenido.id}")
            
            # 6. SIMULACI√ìN DE ACTUALIZACI√ìN DE UI
            print("\n6Ô∏è‚É£ SIMULANDO ACTUALIZACI√ìN DE UI...")
            
            # Formato de datos para el frame de informaci√≥n
            vale_data_ui = {
                'noVale': ultimo_vale_obtenido.noVale,
                'tipo': ultimo_vale_obtenido.tipo,
                'total': ultimo_vale_obtenido.total,
                'proveedor': ultimo_vale_obtenido.proveedor,
                'fechaVale': ultimo_vale_obtenido.fechaVale,
                'referencia': ultimo_vale_obtenido.referencia,
                'departamento': ultimo_vale_obtenido.departamento,
                'descripcion': ultimo_vale_obtenido.descripcion
            }
            
            print("‚úÖ Datos formateados para UI:")
            for key, value in vale_data_ui.items():
                valor_mostrar = str(value)[:50] + "..." if len(str(value)) > 50 else str(value)
                print(f"      {key:15}: {valor_mostrar}")
        else:
            print("‚ùå obtener_ultimo_vale() no funcion√≥")
        
        # Limpiar si insertamos un vale temporal
        if not usar_existente:
            ultimo_vale.delete_instance()
            print("   üßπ Vale temporal eliminado")
        
        print("\nüéâ TEST INTEGRACI√ìN COMPLETA EXITOSO")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en test de integraci√≥n: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    finally:
        if not db.is_closed():
            db.close()

def mostrar_flujo_completo():
    """
    Muestra el flujo completo del sistema AutoCarga.
    """
    print("\n" + "=" * 60)
    print("üîÑ FLUJO COMPLETO DEL SISTEMA AUTOCARGA")
    print("=" * 60)
    
    flujo = [
        ("1. Usuario presiona", "Bot√≥n 'AutoCarga' en la UI"),
        ("2. Sistema muestra", "Di√°logo de configuraci√≥n"),
        ("3. Usuario configura", "Carpeta y par√°metros de b√∫squeda"),
        ("4. AutoCarga busca", "Archivos PDF de vales en C:/QuiterWeb/cache"),
        ("5. PDFDataExtractor", "Extrae datos de cada PDF encontrado"),
        ("6. procesar_datos_vale()", "Convierte datos al formato de BD"),
        ("7. AutocargaController", "Inserta vales en base de datos"),
        ("8. BD actualizada", "Nuevos registros en tabla 'vale'"),
        ("9. UI actualizada", "Frame inferior muestra √∫ltimo vale"),
        ("10. Usuario ve", "Informaci√≥n completa del vale procesado")
    ]
    
    for paso, descripcion in flujo:
        print(f"{paso:25} ‚Üí {descripcion}")
    
    print("\n" + "=" * 60)
    print("üìä CAMPOS PROCESADOS EN CADA VALE:")
    print("=" * 60)
    
    campos = [
        ("noVale", "V152266", "N√∫mero √∫nico del vale"),
        ("proveedor", "SERVICIOS GLOBALES...", "Nombre del proveedor"),
        ("total", "12,837.49", "Monto total"),
        ("descripcion", "MARKETING DE EXPERIENCIA...", "Descripci√≥n del servicio"),
        ("referencia", "8122661", "N√∫mero de referencia"),
        ("departamento", "6", "C√≥digo de departamento"),
        ("fechaVale", "2025-07-18", "Fecha del vale"),
        ("tipo", "VCV", "Tipo de vale"),
        ("cuenta", "3221", "N√∫mero de cuenta")
    ]
    
    for campo, ejemplo, descripcion in campos:
        print(f"{campo:15} | {ejemplo:20} | {descripcion}")

if __name__ == "__main__":
    success = test_integracion_completa()
    if success:
        mostrar_flujo_completo()
