"""
Lector de carpeta para buscar archivos de Vales y √ìrdenes recientes.
Busca archivos PDF con patrones espec√≠ficos modificados en los √∫ltimos d√≠as.
"""

import os
from datetime import datetime, timedelta
from pathlib import Path
from typing import Tuple, List


def buscar_vales_y_ordenes_recientes(ruta_carpeta: str, dias: int = 2) -> Tuple[List[str], List[str]]:
    """
    Busca archivos de Vales y √ìrdenes modificados en los √∫ltimos d√≠as.
    
    Args:
        ruta_carpeta (str): Ruta de la carpeta donde buscar
        dias (int): N√∫mero de d√≠as atr√°s para buscar (default: 2)
        
    Returns:
        Tuple[List[str], List[str]]: (lista_vales, lista_ordenes)
    """
    # Patrones para identificar archivos
    patron_vales = "QRSVCMX"  # Vales
    patron_ordenes = "QRSOPMX208"  # √ìrdenes
    
    # Calcular fecha l√≠mite
    fecha_limite = datetime.now() - timedelta(days=dias)
    
    vales = []
    ordenes = []
    
    try:
        # Verificar que la carpeta existe
        if not os.path.exists(ruta_carpeta):
            print(f"‚ùå La carpeta {ruta_carpeta} no existe")
            return vales, ordenes
        
        # Buscar archivos en la carpeta
        for archivo in os.listdir(ruta_carpeta):
            ruta_completa = os.path.join(ruta_carpeta, archivo)
            
            # Solo procesar archivos PDF
            if not archivo.lower().endswith('.pdf'):
                continue
            
            # Verificar fecha de modificaci√≥n
            try:
                fecha_modificacion = datetime.fromtimestamp(os.path.getmtime(ruta_completa))
                if fecha_modificacion < fecha_limite:
                    continue
            except OSError:
                continue
            
            # Clasificar por tipo de archivo
            if patron_vales in archivo:
                vales.append(ruta_completa)
            elif patron_ordenes in archivo:
                ordenes.append(ruta_completa)
        
        # Ordenar por fecha de modificaci√≥n (m√°s recientes primero)
        vales.sort(key=lambda x: os.path.getmtime(x), reverse=True)
        ordenes.sort(key=lambda x: os.path.getmtime(x), reverse=True)
        
    except Exception as e:
        print(f"‚ùå Error al buscar archivos: {e}")
    
    return vales, ordenes


def listar_archivos_disponibles(ruta_carpeta: str, patron: str = "") -> List[str]:
    """
    Lista todos los archivos PDF disponibles en la carpeta.
    
    Args:
        ruta_carpeta (str): Ruta de la carpeta
        patron (str): Patr√≥n opcional para filtrar archivos
        
    Returns:
        List[str]: Lista de archivos encontrados
    """
    archivos = []
    
    try:
        if not os.path.exists(ruta_carpeta):
            return archivos
        
        for archivo in os.listdir(ruta_carpeta):
            if archivo.lower().endswith('.pdf'):
                if not patron or patron in archivo:
                    ruta_completa = os.path.join(ruta_carpeta, archivo)
                    archivos.append(ruta_completa)
        
        archivos.sort()
        
    except Exception as e:
        print(f"‚ùå Error al listar archivos: {e}")
    
    return archivos


def test_lector():
    """
    Funci√≥n de prueba para el lector de carpetas.
    """
    ruta_test = r"C:\QuiterWeb\cache"
    
    print("üß™ PRUEBA DEL LECTOR DE CARPETAS")
    print("=" * 50)
    print(f"üìÇ Carpeta: {ruta_test}")
    print(f"üìÖ Buscando archivos de los √∫ltimos 2 d√≠as")
    print()
    
    vales, ordenes = buscar_vales_y_ordenes_recientes(ruta_test, 2)
    
    print(f"üí≥ Vales encontrados: {len(vales)}")
    for vale in vales[:5]:  # Mostrar solo los primeros 5
        print(f"   üìÑ {Path(vale).name}")
    if len(vales) > 5:
        print(f"   ... y {len(vales) - 5} m√°s")
    
    print(f"\nüìã √ìrdenes encontradas: {len(ordenes)}")
    for orden in ordenes[:5]:  # Mostrar solo las primeras 5
        print(f"   üìÑ {Path(orden).name}")
    if len(ordenes) > 5:
        print(f"   ... y {len(ordenes) - 5} m√°s")


if __name__ == "__main__":
    test_lector()
