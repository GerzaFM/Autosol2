#!/usr/bin/env python3
"""
Script de prueba con archivo real de vale QRSVCMX
"""

import sys
import os
from pathlib import Path

# Agregar el directorio src al path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from buscarapp.autocarga.extractor import PDFDataExtractor

def test_archivo_real():
    """
    Prueba la extracci√≥n con el archivo real de vale.
    """
    print("üß™ PRUEBA CON ARCHIVO REAL DE VALE")
    print("=" * 60)
    
    # Archivo real de vale
    archivo_vale = r"C:\QuiterWeb\cache\15gerzahin.flores_QRSVCMX_V153597_183460_CD.pdf"
    
    if not Path(archivo_vale).exists():
        print(f"‚ùå Archivo no encontrado: {archivo_vale}")
        return
    
    print(f"üìÑ Procesando: {Path(archivo_vale).name}")
    print("-" * 60)
    
    # Inicializar extractor
    extractor = PDFDataExtractor()
    
    try:
        # Extraer todos los datos incluyendo descripci√≥n
        datos = extractor.extract_all_data(archivo_vale)
        
        if datos:
            print("‚úÖ Datos extra√≠dos:")
            for campo, valor in datos.items():
                if valor:
                    print(f"   ‚úÖ {campo}: {valor}")
                else:
                    print(f"   ‚ùå {campo}: (No encontrado)")
            
            # Destacar la descripci√≥n
            descripcion = datos.get('Descripcion', '')
            if descripcion:
                print(f"\nüéØ DESCRIPCI√ìN ENCONTRADA:")
                print(f"   üìù {descripcion}")
            else:
                print("\n‚ö†Ô∏è  DESCRIPCI√ìN NO ENCONTRADA")
                
                # Mostrar texto bruto para depuraci√≥n
                print("\nüîç TEXTO BRUTO PARA DEPURACI√ìN:")
                texto = extractor.extract_text_from_pdf(archivo_vale)
                lines = texto.split('\n')
                for i, line in enumerate(lines):
                    if 'descripci' in line.lower() or 'concepto' in line.lower():
                        print(f"   L√≠nea {i}: {line}")
                        if i + 1 < len(lines):
                            print(f"   L√≠nea {i+1}: {lines[i+1]}")
        else:
            print("‚ùå No se pudieron extraer datos")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
    
    print("\n" + "=" * 60)
    print("üèÅ PRUEBA COMPLETADA")

if __name__ == "__main__":
    test_archivo_real()
